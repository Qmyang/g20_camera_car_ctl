
/*
 * main.c
 *
 *  Created on: Feb 27, 2017
 *      Author: Qmyang
 */

#include "xparameters.h"
#include "xil_io.h"
#include "rc_ctl.h"
#include <stdio.h>
//#include "platform.h"
#include "xil_printf.h"
#include <stdlib.h>


// Read/Write 16384 words or 64kB
#define TEST_SIZE 16384
#define red(pixel) ((pixel & 0xff0000) >> 16)
#define green(pixel) ((pixel & 0xff00) >> 8)
#define blue(pixel) (pixel & 0xff)



#define ONE_SEC 100000000
#define FORWARD 0b1011
#define LEFT 0b1010
#define RIGHT 0b1001
#define BACKWARD 0b0111

struct Actions {
   long  time;
   int  direction;
};


#define OUTPUT 1
// Pointer to the external memory
volatile unsigned int * memptr = (unsigned int*) XPAR_MIG_7SERIES_0_BASEADDR;
// Thomas Wang's 32-bit mix hash

#define DISPLAY_COLUMNS  640
#define DISPLAY_ROWS     480

volatile unsigned int *rc_ctl = XPAR_RC_CTL_0_S00_AXI_BASEADDR;
volatile unsigned int *gpio_sw = 0x40000000;
volatile unsigned int *gpio_rc = 0x44a40000;
volatile unsigned int *state_reg = XPAR_RC_CTL_0_S00_AXI_BASEADDR + 16;


// VDMA (Camera)
volatile unsigned int * VDMA_CAM    = (unsigned int *)XPAR_AXI_VDMA_3_BASEADDR;
volatile unsigned int * VDMA_CAM_CR = (unsigned int *)(XPAR_AXI_VDMA_3_BASEADDR + 0x30);
volatile unsigned int * VDMA_CAM_AD = (unsigned int *)(XPAR_AXI_VDMA_3_BASEADDR + 0xAC);
volatile unsigned int * VDMA_CAM_ST = (unsigned int *)(XPAR_AXI_VDMA_3_BASEADDR + 0xA8);
volatile unsigned int * VDMA_CAM_HS = (unsigned int *)(XPAR_AXI_VDMA_3_BASEADDR + 0xA4);
volatile unsigned int * VDMA_CAM_VS = (unsigned int *)(XPAR_AXI_VDMA_3_BASEADDR + 0xA0);


// VDMA (VGA)
volatile unsigned int * VDMA_VGA    = (unsigned int *)XPAR_AXI_VDMA_2_BASEADDR;
volatile unsigned int * VDMA_VGA_CR = (unsigned int *)XPAR_AXI_VDMA_2_BASEADDR;
volatile unsigned int * VDMA_VGA_AD = (unsigned int *)(XPAR_AXI_VDMA_2_BASEADDR + 0x5C);
volatile unsigned int * VDMA_VGA_ST = (unsigned int *)(XPAR_AXI_VDMA_2_BASEADDR + 0x58);
volatile unsigned int * VDMA_VGA_HS = (unsigned int *)(XPAR_AXI_VDMA_2_BASEADDR + 0x54);
volatile unsigned int * VDMA_VGA_VS = (unsigned int *)(XPAR_AXI_VDMA_2_BASEADDR + 0x50);
//
// VDMA (FB_IN)
volatile unsigned int * VDMA_FB_IN    = (unsigned int *)XPAR_AXI_VDMA_0_BASEADDR;
volatile unsigned int * VDMA_FB_IN_CR = (unsigned int *)XPAR_AXI_VDMA_0_BASEADDR;
volatile unsigned int * VDMA_FB_IN_AD = (unsigned int *)(XPAR_AXI_VDMA_0_BASEADDR + 0x5C);
volatile unsigned int * VDMA_FB_IN_ST = (unsigned int *)(XPAR_AXI_VDMA_0_BASEADDR + 0x58);
volatile unsigned int * VDMA_FB_IN_HS = (unsigned int *)(XPAR_AXI_VDMA_0_BASEADDR + 0x54);
volatile unsigned int * VDMA_FB_IN_VS = (unsigned int *)(XPAR_AXI_VDMA_0_BASEADDR + 0x50);


// VDMA (FB_OUT)
volatile unsigned int * VDMA_FB_OUT    = (unsigned int *)XPAR_AXI_VDMA_1_BASEADDR;
volatile unsigned int * VDMA_FB_OUT_CR = (unsigned int *)(XPAR_AXI_VDMA_1_BASEADDR + 0x30);
volatile unsigned int * VDMA_FB_OUT_AD = (unsigned int *)(XPAR_AXI_VDMA_1_BASEADDR + 0xAC);
volatile unsigned int * VDMA_FB_OUT_ST = (unsigned int *)(XPAR_AXI_VDMA_1_BASEADDR + 0xA8);
volatile unsigned int * VDMA_FB_OUT_HS = (unsigned int *)(XPAR_AXI_VDMA_1_BASEADDR + 0xA4);
volatile unsigned int * VDMA_FB_OUT_VS = (unsigned int *)(XPAR_AXI_VDMA_1_BASEADDR + 0xA0);

//image filter
volatile unsigned int * filter_ctl    = (unsigned int *)XPAR_IMAGE_FILTER_V2_0_0_BASEADDR;

struct coordinate {
	unsigned int x;
	unsigned int y;
};

struct Actions getAction(int x_g, int y_g, int x_h, int y_h, int x_t, int y_t)
{
	int vector_gt_x = x_g - x_t;
	int vector_gt_y = y_g - y_t;
	int vector_ht_x = x_h - x_t;
	int vector_ht_y = y_h - y_t;

	float dot_gt_ht = (float)(vector_gt_x * vector_ht_x + vector_gt_y * vector_ht_y);
	float len_gt = sqrt(vector_gt_x * vector_gt_x + vector_gt_y * vector_gt_y);
	float len_ht = sqrt(vector_ht_x * vector_ht_x + vector_ht_y * vector_ht_y);
	float cos = dot_gt_ht / len_gt / len_ht;
	float angle_rad = acos(cos);
	int angle = (int)((angle_rad * 180) / 3.141592);

    int cross_gt_ht = vector_gt_x * vector_ht_y - vector_gt_y * vector_ht_x;

    int vector_gh_x = x_g - x_h;
	int vector_gh_y = y_g - y_h;
    float len_gh = sqrt(vector_gh_x * vector_gh_x + vector_gh_y * vector_gh_y);

    struct Actions action;

    if (len_gh < 0)
    {
    	action.direction = 0b1111;
		action.time = 0;
		return  action;
    }

    if (angle < 10)
    {
    	action.direction = FORWARD;
    	action.time = (long)ONE_SEC * 0.4 + ((long)ONE_SEC * (long)len_gh/64);
    }
    else if (cross_gt_ht > 0)
    {
    	action.direction = LEFT;
    	action.time = (long)ONE_SEC * 0.4 + ((long)ONE_SEC * (long)angle/180);
    }
    else
    {
    	action.direction = RIGHT;
    	action.time = (long)ONE_SEC * 0.4 + ((long)ONE_SEC * (long)angle/180);
    }
	return action;
}

int main()
{
	unsigned int i, j, ii, jj;
	unsigned int (*fb_in)[640] = memptr;
	int x_g = 32;
	int y_g = 0;
	int x_h = 64;
	int y_h = 48;
	int x_t = 32;
	int y_t = 24;
	struct Actions action;
	int state;
#if OUTPUT
	unsigned int (*fb_out)[640] = 0x81000000;
#else
	unsigned int (*fb_out)[64] = 0x81000000;
#endif
	int switch_value = 0;
	int r,g,b;
	int marker_size = 0;
	struct coordinate coords = {0};

	for (i = 0; i < 480; i++) {
		for (j = 0; j < 640; j++){
			fb_out[i][j] = 0;
		}
	}


	*(VDMA_CAM_CR) = 0x1;			// Enable VDMA
	*(VDMA_CAM_AD) = (unsigned int)fb_in;		// The base address of the frame buffer
	*(VDMA_CAM_ST) = 2560;			// Line size (stride value)
	*(VDMA_CAM_HS) = 4*640;	// Horizontal Pixel Count * 4B/pixel
	*(VDMA_CAM_VS) = 480;		// Vertical Line Count

	*(VDMA_VGA_CR) = 0x1;			// Enable VDMA
	*(VDMA_VGA_AD) = (unsigned int)fb_out;		// The base address of the frame buffer
	*(VDMA_VGA_ST) = 2560;			// Line size (stride value)
	*(VDMA_VGA_HS) = 4*DISPLAY_COLUMNS;	// Horizontal Pixel Count * 4B/pixel
	*(VDMA_VGA_VS) = DISPLAY_ROWS;		// Vertical Line Count

	*(VDMA_FB_IN_CR) = 0x1;			// Enable VDMA
	*(VDMA_FB_IN_AD) = (unsigned int)fb_in;		// The base address of the frame buffer
	*(VDMA_FB_IN_ST) = 2560;			// Line size (stride value)
	*(VDMA_FB_IN_HS) = 4*DISPLAY_COLUMNS;	// Horizontal Pixel Count * 4B/pixel
	*(VDMA_FB_IN_VS) = DISPLAY_ROWS;		// Vertical Line Count



	*(VDMA_FB_OUT_CR) = 0x1;			// Enable VDMA
	*(VDMA_FB_OUT_AD) = (unsigned int)fb_out;		// The base address of the frame buffer

#if OUTPUT
	*(VDMA_FB_OUT_ST) = 2560;			// Line size (stride value)
#else
	*(VDMA_FB_OUT_ST) = 256;			// Line size (stride value)
#endif
	*(VDMA_FB_OUT_HS) = 4*64;	// Horizontal Pixel Count * 4B/pixel
	*(VDMA_FB_OUT_VS) = 48;		// Vertical Line Count

	*filter_ctl = 1;		//enable filter

#if !OUTPUT
	for (i = 0; i < 48; i++) {
		for (j = 0; j < 64; j++){
			volatile unsigned int pixel = fb_out[i][j];
			r = red(fb_out[i][j]);
			g = green(fb_out[i][j]);
			b = blue(fb_out[i][j]);

			if ( r > 90 && b < 70 && g < 70) {
				marker_size += 1;
				if (marker_size > 1) {
					coords.x = i;
					coords.y = j;
					break;
				}
			}
			else
				marker_size = 0;
		}
		if (marker_size > 1)
			break;
	}


//	//===== For TestBench ===========================================
//
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 12, 0x4); // 5s
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 0, 0x4); // 0.5s
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 4, 0xA);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x1);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x0);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x1);
//
//	//================================================================



//	//===== For Test on Board ========================================
//	//init_platform();
//
//
//
//	// 90 Degree turn
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 12, ONE_SEC * 2); // 5s
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 0, ONE_SEC); // 0.5s
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 4, RIGHT);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x1);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x0);
//
//	state = *state_reg & 0xc0000000 >> 30;
//	if (state == 0b01)
//	{
//		state = *state_reg & 0xc0000000 >> 30;
//	}
//	while (state == 0b10)
//	{
//		state = *state_reg & 0xc0000000 >> 30;
//	}
//
//
//	// 4cm forward
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 12, ONE_SEC * 2);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 0, ONE_SEC);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 4, LEFT);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x1);
//	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x0);
//
//	// Controlled by switch
//	while(1)
//	{
//		*(rc_ctl + 1) = *gpio_sw & 0b1111;
//		*(rc_ctl + 2) = (*gpio_sw & 0b1000000000000000) >> 15;
//	}
//
//	//================================================================



	//====================================================================
	//========= Control with Feedback ====================================
	//====================================================================


	action = getAction(x_g, y_g, x_h, y_h, x_t, y_t);

	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 12, ONE_SEC * 2); // prepost count
	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 0, action.time); // count
	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 4, action.direction); // direction
	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x1);
	RC_CTL_mWriteReg(XPAR_RC_CTL_0_S00_AXI_BASEADDR, 8, 0x0);

	state = *state_reg & 0xc0000000 >> 30;
//	if (state == 0b01) // Idle
//	{
//		state = *state_reg & 0xc0000000 >> 30;
//	}
	while (state == 0b10) // Running
	{
		state = *state_reg & 0xc0000000 >> 30;
	}

	//====================================================================
	//====================================================================
	//====================================================================

#else

	switch_value = *gpio_sw & 1;
	while (1) {
		i = i + 1;
		if ((*gpio_sw & 0x1) == switch_value)
			continue;

		switch_value = *gpio_sw & 1;
		*(VDMA_VGA_CR) = 0x0;

		*(VDMA_VGA_CR) = 0x1;
		if(*gpio_sw & 0x1)
			*(VDMA_VGA_AD) = (unsigned int)fb_out;
		else
			*(VDMA_VGA_AD) = (unsigned int)fb_in;
		*(VDMA_VGA_ST) = 2560;			// Line size (stride value)
		*(VDMA_VGA_HS) = 4*DISPLAY_COLUMNS;	// Horizontal Pixel Count * 4B/pixel
		*(VDMA_VGA_VS) = DISPLAY_ROWS;		// Vertical Line Count

	}
#endif
}


